include:
    - project: "epi2melabs/ci-templates"
      file: "push-github.yaml"
    - project: "epi2melabs/ci-templates"
      file: "push-conda.yaml"
    - project: "epi2melabs/ci-templates"
      file: "snippets.yaml"

image: ${UBUNTUIMAGE}:20.04

variables:
    GIT_SUBMODULE_STRATEGY: recursive


.prep-image: &prep-image |
    export DEBIAN_FRONTEND=noninteractive
    apt update -qq
    apt install -y --no-install-recommends gcc autoconf libtool automake valgrind make curl wget zlib1g-dev libbz2-dev libreadline-dev libssl-dev libffi-dev liblzma-dev libcurl4-gnutls-dev

.minimal-python: &minimal-python |
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq && apt-get install -y -qq python3-all-dev python3-venv


stages:
    - test
    - prerelease
    - release


# Insist that the version in __init__.py matches the git tag
# note: don't use snippet here because that uses ${CI_PROJECT_NAME}
.check-py-versions: &check-py-versions |
    PYVER="v"$(grep "__version__ = " modbampy/__init__.py | awk '{gsub("\"","",$3); print $3}')
    TAGVER=${CI_COMMIT_TAG}
    if [[ "${PYVER}" != "${TAGVER}" ]]; then
        echo "Mismatching TAG and PACKAGE versions:"
        echo " -     TAG:'$PYVER'"
        echo " - PACKAGE:'$TAGVER'"
        exit 1
    else
        echo "TAG and PACKAGE versions agree: '${PYVER}'"
    fi


bld:program:
    stage: test
    before_script:
        - *prep-image
    script:
        - make modbam2bed
        - ./modbam2bed --help
        - make mem_check


bld:api-test:
    stage: test
    script:
        - *prep-image
        - *minimal-python
        - make test_api


deploy-checks:
    stage: prerelease
    variables:
        PACKAGE_NAME: modbampy
    script:
        - !reference [.check, argp-c-version]
        - !reference [.check, python-version]
        - !reference [.check, changelog]
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'


conda:
    extends: .deploy-conda-linux
    variables:
        RECIPEPATH: "../conda"
    before_script:
        - *prep-image
        - export CONDA_PKG=${CI_PROJECT_NAME}
        - export CONDA_PKG_VERSION=${CI_COMMIT_TAG/v/}
        - mkdir conda-build
        - cd conda-build

conda-mac:
    extends: .deploy-conda-mac
    variables:
        RECIPEPATH: "../conda"
    before_script:
        - export CONDA_PKG=${CI_PROJECT_NAME}
        - export CONDA_PKG_VERSION=${CI_COMMIT_TAG/v/}
        - mkdir conda-build
        - cd conda-build

### Python

bld:py-sdist:
    stage: prerelease
    script:
        - *prep-image
        - *minimal-python
        - make sdist
        - cd dist
        - python3 -m venv venv
        - . venv/bin/activate
        - pip install --upgrade pip
        - pip install *.tar.gz
    artifacts:
        paths:
            - dist/*.tar.gz

.many-linux: &many-linux-def
    stage: prerelease
    variables:
        DO_COUNT_TEST: 1
    script:
        - echo "Building a Python ${PYWHEEL} wheel on manylinux_${FLAVOUR}"
        - ./build-wheels.sh . ${PYWHEEL}
    artifacts:
        paths:
            - wheelhouse-final/*.whl
    only:
        - tags


make-wheels-2010:
    extends: .many-linux
    image: "quay.io/pypa/manylinux2010_x86_64"
    parallel:
        matrix:
            - PYWHEEL: [7, 8]
              FLAVOUR: ["2010"]


make-wheels-2014:
    extends: .many-linux
    image: "quay.io/pypa/manylinux2014_x86_64"
    parallel:
        matrix:
            - PYWHEEL: [7, 8, 9]
              FLAVOUR: ["2014"]


make-wheels-2_24:
    extends: .many-linux
    image: "quay.io/pypa/manylinux_2_24_x86_64"
    parallel:
        matrix:
            - PYWHEEL: [8, 9, 10]
              FLAVOUR: ["2_24"]


deploy:pypi:
    stage: release
    script:
        - *minimal-python
        - make pypi_build/bin/activate
        - source pypi_build/bin/activate
        - twine upload --non-interactive dist/modbampy*.tar.gz wheelhouse-final/modbampy*.whl
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'
